import tensorflow as tf

from abc import ABCMeta, abstractmethod
from .interfaces.model_base import BaseInterface
from .utils import Required, TENSOR, make_folders_for_path


class ModelBase(BaseInterface):
    __metaclass__ = ABCMeta

    def __init__(self, *args, **kwargs):
        self.global_step = -1

        initialize_variables = kwargs.pop("initialize_variables", True)
        restore = kwargs.pop("restore", False)
        self.model_path = kwargs.pop("model_path", "model")
        self.logs_path = kwargs.pop("logs_path", "logs")
        flush_secs = kwargs.pop("flush_secs", 10.0)
        self.graph = kwargs.pop("graph", tf.Graph())

        self.sess = tf.Session(graph=self.graph)
        self.define_model(*args, **kwargs)

        if not hasattr(self, 'global_step'):
            self.global_step = 0

        with self.graph.as_default():
            self.set_summaries()
            self.writer = tf.summary.FileWriter(self.logs_path, graph=self.graph, flush_secs=flush_secs)
            self.saver = tf.train.Saver(allow_empty=True)

            if not initialize_variables:
                return
            elif restore:
                self.saver.restore(self.sess, self.model_path)
            else:
                self.initialize_variables()



    @abstractmethod
    def define_model(self, *args, **kwargs): pass

    def initialize_variables(self):
        self.sess.run(tf.global_variables_initializer())

    def save(self, model_path=None):
        model_path = self.model_path if not model_path else model_path
        make_folders_for_path(model_path)

        self.saver.save(self.sess, model_path)

    def restore(self, model_path=None):
        model_path = self.model_path if not model_path else model_path

        self.sess.close()
        self.sess = tf.Session(graph=self.graph)
        self.saver.restore(self.sess, model_path)

    def set_summaries(self):
        with self.graph.as_default():
            if self.summaries is TENSOR: #not set
                self.summaries = tf.summary.merge_all()

            if self.summaries is None:
                self.summaries = tf.no_op()
