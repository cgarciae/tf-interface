from .base_class import Base
from tfinterface.decorators import return_self
import tensorflow as tf
from abc import abstractmethod

data PlaceholderDefaults(tensor, predict, fit)
data NoValue

class NoValueException(Exception):
    pass

def fit_tuple(PlaceholderDefaults(tensor, _, fit)):
    if isinstance(fit, NoValue):
        raise NoValueException("No fit value given for {}".format(tensor))

    return tensor, fit

def predict_tuple(PlaceholderDefaults(tensor, predict, _)):
    if isinstance(predict, NoValue):
        raise NoValueException("No predict value given for {}".format(tensor))

    return tensor, predict

class Inputs(Base):

    @abstractmethod
    def fit_feed(self, *args, **kwargs):
        pass

    @abstractmethod
    def predict_feed(self, *args, **kwargs):
        pass

class GeneralInputs(Inputs):
    """docstring for GeneralInputs."""
    def __init__(self, name, graph=None, sess=None, **input_specs):
        super(GeneralInputs, self).__init__(name, graph=graph, sess=sess)
        self._input_specs = input_specs

    @return_self
    def build_tensors(self, **input_overrides):
        input_specs = self._input_specs.copy()
        input_specs.update(input_overrides)
        self._placeholder_defaults = {}

        for name, spec in input_specs.items():

            if type(spec) is not dict:

                if type(spec) is tuple:
                    spec = dict(dtype=tf.float32, shape=spec)

                elif hasattr(spec, "__call__"):
                    spec = dict(tensor_fn=spec)

                else:
                    spec = dict(value=spec)


            if "shape" in spec:
                dtype = spec.get("dtype", tf.float32)
                shape = spec.get("shape")
                tensor = tf.placeholder(dtype=dtype, shape=shape, name=name)

                self._placeholder_defaults[name] = PlaceholderDefaults(
                    tensor,
                    spec.get("predict", NoValue()),
                    spec.get("fit", NoValue())
                )

            elif "value" in spec:
                value = spec.get("value")
                dtype = spec.get("dtype", None)
                tensor = tf.convert_to_tensor(value, dtype=dtype, name=name)


            elif "tensor_fn" in spec:
                tensor_fn = spec.get("tensor_fn")
                tensor = tensor_fn()
            
            setattr(self, name, tensor)


    def get_feed(self, **kwargs):
        return ({
            getattr(self, key) : value for key, value in kwargs.items()
        })

    def _get_fit_defaults(self):
        feed = {}

        for name, placeholder_defaults in self._placeholder_defaults.items():
            try:
                tensor, value = fit_tuple(placeholder_defaults)
                feed[tensor] = value
            except NoValueException as e:
                pass

        return feed

    def _get_predict_defaults(self):
        feed = {}

        for name, placeholder_defaults in self._placeholder_defaults.items():
            try:
                tensor, value = predict_tuple(placeholder_defaults)
                feed[tensor] = value
            except NoValueException as e:
                pass

        return feed

    def fit_feed(self, *args, **kwargs):
        feed = self._get_fit_defaults()
        feed.update(self.get_feed(*args, **kwargs))

        return feed


    def predict_feed(self, *args, **kwargs):
        feed = self._get_predict_defaults()
        feed.update(self.get_feed(*args, **kwargs))

        return feed
