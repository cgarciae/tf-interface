from .base_class import Base
from .inputs import GeneralInputs, Inputs
import tensorflow as tf
from tfinterface.decorators import return_self, with_graph_as_default, copy_self
from abc import abstractmethod
import os
from tfinterface import utils

class ModelBase(Base):
    def __init__(self, name, graph=None, sess=None, model_path=None, logs_path="logs", seed=None):
        super(ModelBase, self).__init__(name, graph=graph, sess=sess)

        with self.graph.as_default():
            self.seed = seed
            self.model_path = model_path if model_path else name
            self.logs_path = logs_path

            if self.seed is not None:
                tf.set_random_seed(self.seed)


    @with_graph_as_default
    @copy_self
    def __call__(self, inputs, inputs_class=GeneralInputs):

        self.inputs = self.get_inputs(inputs, inputs_class=inputs_class)

        return super(ModelBase, self).__call__()

    def get_inputs(self, inputs, inputs_class):

        if isinstance(inputs, Inputs):
            return inputs

        else:
            if "name" not in inputs:
                inputs["name"] = "{}_inputs".format(self.name)

            return inputs_class(**inputs)()



    @return_self
    @with_graph_as_default
    def initialize(self, restore=False, model_path=None):
        if not restore:
            self.sess.run(tf.global_variables_initializer())
        else:
            var_list = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self.name)
            model_path = (self.model_path if not model_path else model_path) |> os.path.abspath

            tf.train.Saver().restore(self.sess, model_path)

    @return_self
    @with_graph_as_default
    def save(self, model_path=None):
        model_path = (self.model_path if not model_path else model_path) |> os.path.abspath
        utils.make_dirs_for_path(model_path)
        tf.train.Saver().save(self.sess, model_path)


class Model(ModelBase):

    @abstractmethod
    def predict(self, *args, **kwargs): pass
