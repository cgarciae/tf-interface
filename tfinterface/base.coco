import tensorflow as tf
from copy import copy

from abc import ABCMeta, abstractmethod

class Base(object):
    __metaclass__ = ABCMeta

    @abstractmethod
    def _build(self, *args, **kwargs): pass

    def __init__(self, name, graph=None):
        self.name = name
        self.template = tf.make_template(self.name, self.__class__._build)
        self.graph = graph if graph else tf.get_default_graph()

    def __call__(self, *inputs):
        new = copy(self)

        with new.graph.as_default():
            new.template(new, *inputs)

        return new

class Inputs(Base):
    __metaclass__ = ABCMeta

    @abstractmethod
    def fit_feed(self, *args, **kwargs): pass

    @abstractmethod
    def predict_feed(self, *args, **kwargs): pass

class Model(Base):
    __metaclass__ = ABCMeta

    def __init__(self, name, graph=None, sess=None, model_path="model", logs_path="logs", sess_kwargs={}, seed=None):
        super(Model, self).__init__(name, graph=graph)

        self.seed = seed
        self.model_path = model_path
        self.logs_path = logs_path
        self.sess_kwargs = sess_kwargs
        self.sess = sess if sess else tf.Session(graph=self.graph, **self.sess_kwargs)

        self.saver = tf.train.Saver(allow_empty=True)

        if self.seed is not None:
            with self.graph.as_default():
                tf.set_random_seed(self.seed)


    def initialize(self, restore=False, model_path=None):
        if not restore:
            self.sess.run(tf.global_variables_initializer())
        else:
            model_path = self.model_path if not model_path else model_path
            self.saver.restore(self.sess, model_path)

        return self

    def save(self, model_path=None):
        model_path = self.model_path if not model_path else model_path
        self.saver.save(self.sess, model_path)

        return self

class Estimator(Model):

    @abstractmethod
    def predict(self, *args, **kwargs): pass


class Trainer(Model):

    @abstractmethod
    def fit(self, *args, **kwargs): pass
