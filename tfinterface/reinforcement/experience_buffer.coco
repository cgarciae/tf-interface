from tfinterface.interfaces import ExperienceBufferInterface
from operator import itemgetter


class ExperienceReplay(ExperienceBufferInterface):

    def __init__(self, tuple_len, lst=None, max_length=100000):
        self.list = lst if lst is not None else []
        self.max_length = max_length
        self.tuple_len = tuple_len

    def append(self, *experience):
        self.list.append(experience)

        if len(self.list) > self.max_length:
            self.list.pop(0)


    def random_batch(self, batch_size):
        idx = self.get_random_idx(batch_size)
        batch = [self.list[i] for i in idx]
        return self.__class__(self.__class__, lst=batch)

    def unzip(self):
        if len(self) > 0:
            return ([list(e) for e in zip(*self.list)])
        else:
            return [ tuple() ] * self.tuple_len

    def __iter__(self):
        return iter(self.list)


    def reset(self):
        pass


    def __len__(self):
        return len(self.list)

    def __getitem__(self, *args, **kwargs):
        return self.list.__getitem__(*args, **kwargs)
