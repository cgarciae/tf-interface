from .supervised_model import SupervisedModel
import tensorflow as tf
from tensorflow import layers

class LinearRegression(SupervisedModel):

    def define_model(self, learning_rate=0.01):
        with self.graph.as_default():
            self.x = tf.placeholder(tf.float32, [None, 1])
            self.y = tf.placeholder(tf.float32, [None, 1])

            self.h = self.x |> layers.dense$(?, 1)

            error = self.h - self.y

            self.loss = (
                error
                |> tf.nn.l2_loss
                |> tf.reduce_mean
            )

            tf.summary.scalar('loss', self.loss)

            trainer = tf.train.AdamOptimizer(learning_rate)
            self.update = trainer.minimize(self.loss)
            