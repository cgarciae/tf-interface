from .supervised_model import SupervisedModel

class LinearRegression(SupervisedModel):

    def define_model(self, learning_rate=0.01):
        with self.graph.as_default():
            self.x = tf.placeholder(tf.float32, [None, 1])
            self.y = tf.placeholder(tf.float32, [None, 1])

            self.h = Pipe(self.x, T.linear_layer(1))

            error = self.h - self.y

            self.loss = Pipe(error, T.l2_loss().reduce_mean().summary.create_scalar('loss'))

            trainer = tf.train.AdamOptimizer(learning_rate)
            self.update = trainer.minimize(self.loss) 